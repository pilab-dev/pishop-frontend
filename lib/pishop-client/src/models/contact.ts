/* tslint:disable */
/* eslint-disable */
/**
 * PiShop REST API
 * This is the API documentation for PiShop.   It contains all the endpoints for the PiShop API. The API is exposed at [http://shop.pilab.hu/api/v1](http://shop.pilab.hu/api/v1).  The API is based on [OpenAPI](https://swagger.io/specification/), which is a standard for the description of APIs.  # Webshop API Overview  This API provides access to the core functionalities of our webshop, allowing developers to integrate with our platform. Key features include:  * **Product Catalog:** Retrieve detailed information about our products, including descriptions, images, and pricing. * **Cart Management:** Add, remove, and update items in the user\'s cart. * **Order Management:** Create, update, and track customer orders. * **Customer Management:** Manage customer accounts and profiles. * **Discounts and Promotions:** Apply discounts and promotions to products. * **Image Management:** Upload and manage product images. * **Pages and Menus:** Create and manage pages and menus. * **Authentication:** Secure access to protected resources using Bearer authentication (JWT).  This documentation outlines the available endpoints, request/response formats, and authentication procedures. Use this information to build powerful integrations and enhance your customer experience. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: gyula@pilab.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Customer contact details
 * @export
 * @interface Contact
 */
export interface Contact {
    /**
     * First name
     * @type {string}
     * @memberof Contact
     */
    firstName: string;
    /**
     * Last name
     * @type {string}
     * @memberof Contact
     */
    lastName: string;
    /**
     * Address of the customer
     * @type {string}
     * @memberof Contact
     */
    address: string;
    /**
     * City of the customer
     * @type {string}
     * @memberof Contact
     */
    city: string;
    /**
     * State of the customer
     * @type {string}
     * @memberof Contact
     */
    state?: string;
    /**
     * Zip code of the customer
     * @type {string}
     * @memberof Contact
     */
    zip: string;
    /**
     * Phone number of the customer
     * @type {string}
     * @memberof Contact
     */
    phone: string;
    /**
     * Email of the customer
     * @type {string}
     * @memberof Contact
     */
    email: string;
}

/**
 * Check if a given object implements the Contact interface.
 */
export function instanceOfContact(value: object): value is Contact {
    if (!('firstName' in value) || value['firstName'] === undefined) return false;
    if (!('lastName' in value) || value['lastName'] === undefined) return false;
    if (!('address' in value) || value['address'] === undefined) return false;
    if (!('city' in value) || value['city'] === undefined) return false;
    if (!('zip' in value) || value['zip'] === undefined) return false;
    if (!('phone' in value) || value['phone'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    return true;
}

export function ContactFromJSON(json: any): Contact {
    return ContactFromJSONTyped(json, false);
}

export function ContactFromJSONTyped(json: any, ignoreDiscriminator: boolean): Contact {
    if (json == null) {
        return json;
    }
    return {
        
        'firstName': json['firstName'],
        'lastName': json['lastName'],
        'address': json['address'],
        'city': json['city'],
        'state': json['state'] == null ? undefined : json['state'],
        'zip': json['zip'],
        'phone': json['phone'],
        'email': json['email'],
    };
}

export function ContactToJSON(json: any): Contact {
    return ContactToJSONTyped(json, false);
}

export function ContactToJSONTyped(value?: Contact | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'firstName': value['firstName'],
        'lastName': value['lastName'],
        'address': value['address'],
        'city': value['city'],
        'state': value['state'],
        'zip': value['zip'],
        'phone': value['phone'],
        'email': value['email'],
    };
}

