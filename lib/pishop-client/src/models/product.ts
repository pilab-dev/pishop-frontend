/* tslint:disable */
/* eslint-disable */
/**
 * PiShop REST API
 * This is the API documentation for PiShop.   It contains all the endpoints for the PiShop API. The API is exposed at [http://shop.pilab.hu/api/v1](http://shop.pilab.hu/api/v1).  The API is based on [OpenAPI](https://swagger.io/specification/), which is a standard for the description of APIs.  # Webshop API Overview  This API provides access to the core functionalities of our webshop, allowing developers to integrate with our platform. Key features include:  * **Product Catalog:** Retrieve detailed information about our products, including descriptions, images, and pricing. * **Cart Management:** Add, remove, and update items in the user\'s cart. * **Order Management:** Create, update, and track customer orders. * **Customer Management:** Manage customer accounts and profiles. * **Discounts and Promotions:** Apply discounts and promotions to products. * **Image Management:** Upload and manage product images. * **Pages and Menus:** Create and manage pages and menus. * **Authentication:** Secure access to protected resources using Bearer authentication (JWT).  This documentation outlines the available endpoints, request/response formats, and authentication procedures. Use this information to build powerful integrations and enhance your customer experience. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: gyula@pilab.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ProductImage } from './productImage';
import {
    ProductImageFromJSON,
    ProductImageFromJSONTyped,
    ProductImageToJSON,
    ProductImageToJSONTyped,
} from './productImage';
import type { ProductVariant } from './productVariant';
import {
    ProductVariantFromJSON,
    ProductVariantFromJSONTyped,
    ProductVariantToJSON,
    ProductVariantToJSONTyped,
} from './productVariant';
import type { SEO } from './sEO';
import {
    SEOFromJSON,
    SEOFromJSONTyped,
    SEOToJSON,
    SEOToJSONTyped,
} from './sEO';
import type { PriceRange } from './priceRange';
import {
    PriceRangeFromJSON,
    PriceRangeFromJSONTyped,
    PriceRangeToJSON,
    PriceRangeToJSONTyped,
} from './priceRange';

/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * Unique identifier for the product
     * @type {string}
     * @memberof Product
     */
    id: string;
    /**
     * The handle of the product
     * @type {string}
     * @memberof Product
     */
    handle: string;
    /**
     * The title of the product
     * @type {string}
     * @memberof Product
     */
    title: string;
    /**
     * The description of the product. Markdown is supported
     * @type {string}
     * @memberof Product
     */
    description: string;
    /**
     * The description of the product. HTML is supported
     * @type {string}
     * @memberof Product
     */
    descriptionHtml: string;
    /**
     * The actual price of the product
     * @type {number}
     * @memberof Product
     */
    price: number;
    /**
     * The price which is the original price when discount applies.
     * @type {number}
     * @memberof Product
     */
    compareAtPrice: number;
    /**
     * Tax amount in percentage
     * @type {number}
     * @memberof Product
     */
    taxPercent?: number;
    /**
     * Product variant options
     * @type {{ [key: string]: string; }}
     * @memberof Product
     */
    options?: { [key: string]: string; };
    /**
     * 
     * @type {PriceRange}
     * @memberof Product
     */
    priceRange?: PriceRange;
    /**
     * 
     * @type {ProductImage}
     * @memberof Product
     */
    featuredImage: ProductImage;
    /**
     * 
     * @type {SEO}
     * @memberof Product
     */
    seo: SEO;
    /**
     * List of tags for the product
     * @type {Array<string>}
     * @memberof Product
     */
    tags: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof Product
     */
    updatedAt?: Date;
    /**
     * List of variants for this product
     * @type {Array<ProductVariant>}
     * @memberof Product
     */
    variants: Array<ProductVariant>;
    /**
     * 
     * @type {Array<ProductImage>}
     * @memberof Product
     */
    images: Array<ProductImage>;
    /**
     * Whether the product is available for sale
     * @type {boolean}
     * @memberof Product
     */
    availableForSale: boolean;
    /**
     * The ID of the category that the product belongs to
     * @type {string}
     * @memberof Product
     */
    categoryId: string;
    /**
     * The ID of the brand that the product belongs to
     * @type {string}
     * @memberof Product
     */
    brandId: string;
    /**
     * ID of the product type
     * @type {string}
     * @memberof Product
     */
    productTypeId: string;
    /**
     * Values for custom fields defined by the product type's metadata fields
     * @type {{ [key: string]: any; }}
     * @memberof Product
     */
    customFields?: { [key: string]: any; };
}

/**
 * Check if a given object implements the Product interface.
 */
export function instanceOfProduct(value: object): value is Product {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('handle' in value) || value['handle'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('descriptionHtml' in value) || value['descriptionHtml'] === undefined) return false;
    if (!('price' in value) || value['price'] === undefined) return false;
    if (!('compareAtPrice' in value) || value['compareAtPrice'] === undefined) return false;
    if (!('featuredImage' in value) || value['featuredImage'] === undefined) return false;
    if (!('seo' in value) || value['seo'] === undefined) return false;
    if (!('tags' in value) || value['tags'] === undefined) return false;
    if (!('variants' in value) || value['variants'] === undefined) return false;
    if (!('images' in value) || value['images'] === undefined) return false;
    if (!('availableForSale' in value) || value['availableForSale'] === undefined) return false;
    if (!('categoryId' in value) || value['categoryId'] === undefined) return false;
    if (!('brandId' in value) || value['brandId'] === undefined) return false;
    if (!('productTypeId' in value) || value['productTypeId'] === undefined) return false;
    return true;
}

export function ProductFromJSON(json: any): Product {
    return ProductFromJSONTyped(json, false);
}

export function ProductFromJSONTyped(json: any, ignoreDiscriminator: boolean): Product {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'handle': json['handle'],
        'title': json['title'],
        'description': json['description'],
        'descriptionHtml': json['descriptionHtml'],
        'price': json['price'],
        'compareAtPrice': json['compareAtPrice'],
        'taxPercent': json['taxPercent'] == null ? undefined : json['taxPercent'],
        'options': json['options'] == null ? undefined : json['options'],
        'priceRange': json['priceRange'] == null ? undefined : PriceRangeFromJSON(json['priceRange']),
        'featuredImage': ProductImageFromJSON(json['featuredImage']),
        'seo': SEOFromJSON(json['seo']),
        'tags': json['tags'],
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
        'variants': ((json['variants'] as Array<any>).map(ProductVariantFromJSON)),
        'images': ((json['images'] as Array<any>).map(ProductImageFromJSON)),
        'availableForSale': json['availableForSale'],
        'categoryId': json['categoryId'],
        'brandId': json['brandId'],
        'productTypeId': json['productTypeId'],
        'customFields': json['customFields'] == null ? undefined : json['customFields'],
    };
}

export function ProductToJSON(json: any): Product {
    return ProductToJSONTyped(json, false);
}

export function ProductToJSONTyped(value?: Product | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'handle': value['handle'],
        'title': value['title'],
        'description': value['description'],
        'descriptionHtml': value['descriptionHtml'],
        'price': value['price'],
        'compareAtPrice': value['compareAtPrice'],
        'taxPercent': value['taxPercent'],
        'options': value['options'],
        'priceRange': PriceRangeToJSON(value['priceRange']),
        'featuredImage': ProductImageToJSON(value['featuredImage']),
        'seo': SEOToJSON(value['seo']),
        'tags': value['tags'],
        'updatedAt': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
        'variants': ((value['variants'] as Array<any>).map(ProductVariantToJSON)),
        'images': ((value['images'] as Array<any>).map(ProductImageToJSON)),
        'availableForSale': value['availableForSale'],
        'categoryId': value['categoryId'],
        'brandId': value['brandId'],
        'productTypeId': value['productTypeId'],
        'customFields': value['customFields'],
    };
}

