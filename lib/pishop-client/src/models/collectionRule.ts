/* tslint:disable */
/* eslint-disable */
/**
 * PiShop REST API
 * This is the API documentation for PiShop.   It contains all the endpoints for the PiShop API. The API is exposed at [http://shop.pilab.hu/api/v1](http://shop.pilab.hu/api/v1).  The API is based on [OpenAPI](https://swagger.io/specification/), which is a standard for the description of APIs.  # Webshop API Overview  This API provides access to the core functionalities of our webshop, allowing developers to integrate with our platform. Key features include:  * **Product Catalog:** Retrieve detailed information about our products, including descriptions, images, and pricing. * **Cart Management:** Add, remove, and update items in the user\'s cart. * **Order Management:** Create, update, and track customer orders. * **Customer Management:** Manage customer accounts and profiles. * **Discounts and Promotions:** Apply discounts and promotions to products. * **Image Management:** Upload and manage product images. * **Pages and Menus:** Create and manage pages and menus. * **Authentication:** Secure access to protected resources using Bearer authentication (JWT).  This documentation outlines the available endpoints, request/response formats, and authentication procedures. Use this information to build powerful integrations and enhance your customer experience. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: gyula@pilab.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CollectionRule
 */
export interface CollectionRule {
    /**
     * The product field to match against
     * @type {string}
     * @memberof CollectionRule
     */
    field: CollectionRuleFieldEnum;
    /**
     * The comparison operator to use
     * @type {string}
     * @memberof CollectionRule
     */
    condition: CollectionRuleConditionEnum;
    /**
     * The value to compare against
     * @type {string}
     * @memberof CollectionRule
     */
    value: string;
}


/**
 * @export
 */
export const CollectionRuleFieldEnum = {
    Title: 'title',
    Type: 'type',
    Vendor: 'vendor',
    Price: 'price',
    Tag: 'tag',
    Category: 'category',
    Inventory: 'inventory',
    Weight: 'weight'
} as const;
export type CollectionRuleFieldEnum = typeof CollectionRuleFieldEnum[keyof typeof CollectionRuleFieldEnum];

/**
 * @export
 */
export const CollectionRuleConditionEnum = {
    Equals: 'equals',
    NotEquals: 'not_equals',
    GreaterThan: 'greater_than',
    LessThan: 'less_than',
    StartsWith: 'starts_with',
    EndsWith: 'ends_with',
    Contains: 'contains',
    NotContains: 'not_contains'
} as const;
export type CollectionRuleConditionEnum = typeof CollectionRuleConditionEnum[keyof typeof CollectionRuleConditionEnum];


/**
 * Check if a given object implements the CollectionRule interface.
 */
export function instanceOfCollectionRule(value: object): value is CollectionRule {
    if (!('field' in value) || value['field'] === undefined) return false;
    if (!('condition' in value) || value['condition'] === undefined) return false;
    if (!('value' in value) || value['value'] === undefined) return false;
    return true;
}

export function CollectionRuleFromJSON(json: any): CollectionRule {
    return CollectionRuleFromJSONTyped(json, false);
}

export function CollectionRuleFromJSONTyped(json: any, ignoreDiscriminator: boolean): CollectionRule {
    if (json == null) {
        return json;
    }
    return {
        
        'field': json['field'],
        'condition': json['condition'],
        'value': json['value'],
    };
}

export function CollectionRuleToJSON(json: any): CollectionRule {
    return CollectionRuleToJSONTyped(json, false);
}

export function CollectionRuleToJSONTyped(value?: CollectionRule | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'field': value['field'],
        'condition': value['condition'],
        'value': value['value'],
    };
}

