/* tslint:disable */
/* eslint-disable */
/**
 * PiShop REST API
 * This is the API documentation for PiShop.   It contains all the endpoints for the PiShop API. The API is exposed at [http://shop.pilab.hu/api/v1](http://shop.pilab.hu/api/v1).  The API is based on [OpenAPI](https://swagger.io/specification/), which is a standard for the description of APIs.  # Webshop API Overview  This API provides access to the core functionalities of our webshop, allowing developers to integrate with our platform. Key features include:  * **Product Catalog:** Retrieve detailed information about our products, including descriptions, images, and pricing. * **Cart Management:** Add, remove, and update items in the user\'s cart. * **Order Management:** Create, update, and track customer orders. * **Customer Management:** Manage customer accounts and profiles. * **Discounts and Promotions:** Apply discounts and promotions to products. * **Image Management:** Upload and manage product images. * **Pages and Menus:** Create and manage pages and menus. * **Authentication:** Secure access to protected resources using Bearer authentication (JWT).  This documentation outlines the available endpoints, request/response formats, and authentication procedures. Use this information to build powerful integrations and enhance your customer experience. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: gyula@pilab.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MetadataFieldInputValidation } from './metadataFieldInputValidation';
import {
    MetadataFieldInputValidationFromJSON,
    MetadataFieldInputValidationFromJSONTyped,
    MetadataFieldInputValidationToJSON,
    MetadataFieldInputValidationToJSONTyped,
} from './metadataFieldInputValidation';
import type { MetadataFieldOptionsInner } from './metadataFieldOptionsInner';
import {
    MetadataFieldOptionsInnerFromJSON,
    MetadataFieldOptionsInnerFromJSONTyped,
    MetadataFieldOptionsInnerToJSON,
    MetadataFieldOptionsInnerToJSONTyped,
} from './metadataFieldOptionsInner';

/**
 * 
 * @export
 * @interface MetadataFieldInput
 */
export interface MetadataFieldInput {
    /**
     * URL-friendly identifier
     * @type {string}
     * @memberof MetadataFieldInput
     */
    handle: string;
    /**
     * Display name
     * @type {string}
     * @memberof MetadataFieldInput
     */
    name: string;
    /**
     * Field description
     * @type {string}
     * @memberof MetadataFieldInput
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof MetadataFieldInput
     */
    type: MetadataFieldInputTypeEnum;
    /**
     * 
     * @type {MetadataFieldInputValidation}
     * @memberof MetadataFieldInput
     */
    validation?: MetadataFieldInputValidation;
    /**
     * 
     * @type {Array<MetadataFieldOptionsInner>}
     * @memberof MetadataFieldInput
     */
    options?: Array<MetadataFieldOptionsInner>;
    /**
     * Default value based on field type
     * @type {object}
     * @memberof MetadataFieldInput
     */
    defaultValue?: object;
    /**
     * 
     * @type {string}
     * @memberof MetadataFieldInput
     */
    visibility?: MetadataFieldInputVisibilityEnum;
}


/**
 * @export
 */
export const MetadataFieldInputTypeEnum = {
    Text: 'text',
    Number: 'number',
    Decimal: 'decimal',
    Boolean: 'boolean',
    Select: 'select',
    Multiselect: 'multiselect',
    Color: 'color',
    Date: 'date',
    File: 'file',
    Dimension: 'dimension',
    Weight: 'weight',
    Volume: 'volume',
    Richtext: 'richtext',
    Reference: 'reference'
} as const;
export type MetadataFieldInputTypeEnum = typeof MetadataFieldInputTypeEnum[keyof typeof MetadataFieldInputTypeEnum];

/**
 * @export
 */
export const MetadataFieldInputVisibilityEnum = {
    Storefront: 'storefront',
    Admin: 'admin',
    Both: 'both'
} as const;
export type MetadataFieldInputVisibilityEnum = typeof MetadataFieldInputVisibilityEnum[keyof typeof MetadataFieldInputVisibilityEnum];


/**
 * Check if a given object implements the MetadataFieldInput interface.
 */
export function instanceOfMetadataFieldInput(value: object): value is MetadataFieldInput {
    if (!('handle' in value) || value['handle'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function MetadataFieldInputFromJSON(json: any): MetadataFieldInput {
    return MetadataFieldInputFromJSONTyped(json, false);
}

export function MetadataFieldInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): MetadataFieldInput {
    if (json == null) {
        return json;
    }
    return {
        
        'handle': json['handle'],
        'name': json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'type': json['type'],
        'validation': json['validation'] == null ? undefined : MetadataFieldInputValidationFromJSON(json['validation']),
        'options': json['options'] == null ? undefined : ((json['options'] as Array<any>).map(MetadataFieldOptionsInnerFromJSON)),
        'defaultValue': json['defaultValue'] == null ? undefined : json['defaultValue'],
        'visibility': json['visibility'] == null ? undefined : json['visibility'],
    };
}

export function MetadataFieldInputToJSON(json: any): MetadataFieldInput {
    return MetadataFieldInputToJSONTyped(json, false);
}

export function MetadataFieldInputToJSONTyped(value?: MetadataFieldInput | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'handle': value['handle'],
        'name': value['name'],
        'description': value['description'],
        'type': value['type'],
        'validation': MetadataFieldInputValidationToJSON(value['validation']),
        'options': value['options'] == null ? undefined : ((value['options'] as Array<any>).map(MetadataFieldOptionsInnerToJSON)),
        'defaultValue': value['defaultValue'],
        'visibility': value['visibility'],
    };
}

