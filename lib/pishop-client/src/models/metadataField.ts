/* tslint:disable */
/* eslint-disable */
/**
 * PiShop REST API
 * This is the API documentation for PiShop.   It contains all the endpoints for the PiShop API. The API is exposed at [http://shop.pilab.hu/api/v1](http://shop.pilab.hu/api/v1).  The API is based on [OpenAPI](https://swagger.io/specification/), which is a standard for the description of APIs.  # Webshop API Overview  This API provides access to the core functionalities of our webshop, allowing developers to integrate with our platform. Key features include:  * **Product Catalog:** Retrieve detailed information about our products, including descriptions, images, and pricing. * **Cart Management:** Add, remove, and update items in the user\'s cart. * **Order Management:** Create, update, and track customer orders. * **Customer Management:** Manage customer accounts and profiles. * **Discounts and Promotions:** Apply discounts and promotions to products. * **Image Management:** Upload and manage product images. * **Pages and Menus:** Create and manage pages and menus. * **Authentication:** Secure access to protected resources using Bearer authentication (JWT).  This documentation outlines the available endpoints, request/response formats, and authentication procedures. Use this information to build powerful integrations and enhance your customer experience. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: gyula@pilab.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MetadataFieldValidation } from './metadataFieldValidation';
import {
    MetadataFieldValidationFromJSON,
    MetadataFieldValidationFromJSONTyped,
    MetadataFieldValidationToJSON,
    MetadataFieldValidationToJSONTyped,
} from './metadataFieldValidation';
import type { MetadataFieldOptionsInner } from './metadataFieldOptionsInner';
import {
    MetadataFieldOptionsInnerFromJSON,
    MetadataFieldOptionsInnerFromJSONTyped,
    MetadataFieldOptionsInnerToJSON,
    MetadataFieldOptionsInnerToJSONTyped,
} from './metadataFieldOptionsInner';

/**
 * 
 * @export
 * @interface MetadataField
 */
export interface MetadataField {
    /**
     * Unique identifier
     * @type {string}
     * @memberof MetadataField
     */
    id: string;
    /**
     * URL-friendly identifier
     * @type {string}
     * @memberof MetadataField
     */
    handle: string;
    /**
     * Display name
     * @type {string}
     * @memberof MetadataField
     */
    name: string;
    /**
     * Field description
     * @type {string}
     * @memberof MetadataField
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof MetadataField
     */
    type: MetadataFieldTypeEnum;
    /**
     * 
     * @type {MetadataFieldValidation}
     * @memberof MetadataField
     */
    validation?: MetadataFieldValidation;
    /**
     * 
     * @type {Array<MetadataFieldOptionsInner>}
     * @memberof MetadataField
     */
    options?: Array<MetadataFieldOptionsInner>;
    /**
     * Default value based on field type
     * @type {object}
     * @memberof MetadataField
     */
    defaultValue?: object;
    /**
     * 
     * @type {string}
     * @memberof MetadataField
     */
    visibility?: MetadataFieldVisibilityEnum;
    /**
     * 
     * @type {Date}
     * @memberof MetadataField
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof MetadataField
     */
    updatedAt: Date;
}


/**
 * @export
 */
export const MetadataFieldTypeEnum = {
    Text: 'text',
    Number: 'number',
    Decimal: 'decimal',
    Boolean: 'boolean',
    Select: 'select',
    Multiselect: 'multiselect',
    Color: 'color',
    Date: 'date',
    File: 'file',
    Dimension: 'dimension',
    Weight: 'weight',
    Volume: 'volume',
    Richtext: 'richtext',
    Reference: 'reference'
} as const;
export type MetadataFieldTypeEnum = typeof MetadataFieldTypeEnum[keyof typeof MetadataFieldTypeEnum];

/**
 * @export
 */
export const MetadataFieldVisibilityEnum = {
    Storefront: 'storefront',
    Admin: 'admin',
    Both: 'both'
} as const;
export type MetadataFieldVisibilityEnum = typeof MetadataFieldVisibilityEnum[keyof typeof MetadataFieldVisibilityEnum];


/**
 * Check if a given object implements the MetadataField interface.
 */
export function instanceOfMetadataField(value: object): value is MetadataField {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('handle' in value) || value['handle'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function MetadataFieldFromJSON(json: any): MetadataField {
    return MetadataFieldFromJSONTyped(json, false);
}

export function MetadataFieldFromJSONTyped(json: any, ignoreDiscriminator: boolean): MetadataField {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'handle': json['handle'],
        'name': json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'type': json['type'],
        'validation': json['validation'] == null ? undefined : MetadataFieldValidationFromJSON(json['validation']),
        'options': json['options'] == null ? undefined : ((json['options'] as Array<any>).map(MetadataFieldOptionsInnerFromJSON)),
        'defaultValue': json['defaultValue'] == null ? undefined : json['defaultValue'],
        'visibility': json['visibility'] == null ? undefined : json['visibility'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function MetadataFieldToJSON(json: any): MetadataField {
    return MetadataFieldToJSONTyped(json, false);
}

export function MetadataFieldToJSONTyped(value?: MetadataField | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'handle': value['handle'],
        'name': value['name'],
        'description': value['description'],
        'type': value['type'],
        'validation': MetadataFieldValidationToJSON(value['validation']),
        'options': value['options'] == null ? undefined : ((value['options'] as Array<any>).map(MetadataFieldOptionsInnerToJSON)),
        'defaultValue': value['defaultValue'],
        'visibility': value['visibility'],
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
    };
}

