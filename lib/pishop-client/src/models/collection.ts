/* tslint:disable */
/* eslint-disable */
/**
 * PiShop REST API
 * This is the API documentation for PiShop.   It contains all the endpoints for the PiShop API. The API is exposed at [http://shop.pilab.hu/api/v1](http://shop.pilab.hu/api/v1).  The API is based on [OpenAPI](https://swagger.io/specification/), which is a standard for the description of APIs.  # Webshop API Overview  This API provides access to the core functionalities of our webshop, allowing developers to integrate with our platform. Key features include:  * **Product Catalog:** Retrieve detailed information about our products, including descriptions, images, and pricing. * **Cart Management:** Add, remove, and update items in the user\'s cart. * **Order Management:** Create, update, and track customer orders. * **Customer Management:** Manage customer accounts and profiles. * **Discounts and Promotions:** Apply discounts and promotions to products. * **Image Management:** Upload and manage product images. * **Pages and Menus:** Create and manage pages and menus. * **Authentication:** Secure access to protected resources using Bearer authentication (JWT).  This documentation outlines the available endpoints, request/response formats, and authentication procedures. Use this information to build powerful integrations and enhance your customer experience. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: gyula@pilab.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CollectionRule } from './collectionRule';
import {
    CollectionRuleFromJSON,
    CollectionRuleFromJSONTyped,
    CollectionRuleToJSON,
    CollectionRuleToJSONTyped,
} from './collectionRule';
import type { ImageDef } from './imageDef';
import {
    ImageDefFromJSON,
    ImageDefFromJSONTyped,
    ImageDefToJSON,
    ImageDefToJSONTyped,
} from './imageDef';
import type { SEO } from './sEO';
import {
    SEOFromJSON,
    SEOFromJSONTyped,
    SEOToJSON,
    SEOToJSONTyped,
} from './sEO';

/**
 * 
 * @export
 * @interface Collection
 */
export interface Collection {
    /**
     * Unique identifier for the collection
     * @type {string}
     * @memberof Collection
     */
    id: string;
    /**
     * The title of the collection
     * @type {string}
     * @memberof Collection
     */
    title: string;
    /**
     * URL-friendly handle for the collection. ***Must be unique!***
     * @type {string}
     * @memberof Collection
     */
    handle: string;
    /**
     * Plain text description of the collection
     * @type {string}
     * @memberof Collection
     */
    description: string;
    /**
     * HTML formatted description of the collection
     * @type {string}
     * @memberof Collection
     */
    descriptionHtml: string;
    /**
     * 
     * @type {ImageDef}
     * @memberof Collection
     */
    image: ImageDef;
    /**
     * Number of products in the collection
     * @type {number}
     * @memberof Collection
     */
    productsCount?: number;
    /**
     * Timestamp of when the collection was last updated
     * @type {Date}
     * @memberof Collection
     */
    updatedAt: Date;
    /**
     * 
     * @type {SEO}
     * @memberof Collection
     */
    seo: SEO;
    /**
     * Whether the collection is automated or manual
     * @type {boolean}
     * @memberof Collection
     */
    isAutomated: boolean;
    /**
     * Whether products must match any or all conditions
     * @type {string}
     * @memberof Collection
     */
    ruleMatch: CollectionRuleMatchEnum;
    /**
     * List of rules for automated collections
     * @type {Array<CollectionRule>}
     * @memberof Collection
     */
    rules: Array<CollectionRule>;
}


/**
 * @export
 */
export const CollectionRuleMatchEnum = {
    Any: 'any',
    All: 'all'
} as const;
export type CollectionRuleMatchEnum = typeof CollectionRuleMatchEnum[keyof typeof CollectionRuleMatchEnum];


/**
 * Check if a given object implements the Collection interface.
 */
export function instanceOfCollection(value: object): value is Collection {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('handle' in value) || value['handle'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('descriptionHtml' in value) || value['descriptionHtml'] === undefined) return false;
    if (!('image' in value) || value['image'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('seo' in value) || value['seo'] === undefined) return false;
    if (!('isAutomated' in value) || value['isAutomated'] === undefined) return false;
    if (!('ruleMatch' in value) || value['ruleMatch'] === undefined) return false;
    if (!('rules' in value) || value['rules'] === undefined) return false;
    return true;
}

export function CollectionFromJSON(json: any): Collection {
    return CollectionFromJSONTyped(json, false);
}

export function CollectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Collection {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'title': json['title'],
        'handle': json['handle'],
        'description': json['description'],
        'descriptionHtml': json['descriptionHtml'],
        'image': ImageDefFromJSON(json['image']),
        'productsCount': json['productsCount'] == null ? undefined : json['productsCount'],
        'updatedAt': (new Date(json['updatedAt'])),
        'seo': SEOFromJSON(json['seo']),
        'isAutomated': json['isAutomated'],
        'ruleMatch': json['ruleMatch'],
        'rules': ((json['rules'] as Array<any>).map(CollectionRuleFromJSON)),
    };
}

export function CollectionToJSON(json: any): Collection {
    return CollectionToJSONTyped(json, false);
}

export function CollectionToJSONTyped(value?: Collection | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'title': value['title'],
        'handle': value['handle'],
        'description': value['description'],
        'descriptionHtml': value['descriptionHtml'],
        'image': ImageDefToJSON(value['image']),
        'productsCount': value['productsCount'],
        'updatedAt': ((value['updatedAt']).toISOString()),
        'seo': SEOToJSON(value['seo']),
        'isAutomated': value['isAutomated'],
        'ruleMatch': value['ruleMatch'],
        'rules': ((value['rules'] as Array<any>).map(CollectionRuleToJSON)),
    };
}

