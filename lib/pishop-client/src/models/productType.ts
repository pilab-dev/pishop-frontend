/* tslint:disable */
/* eslint-disable */
/**
 * PiShop REST API
 * This is the API documentation for PiShop.   It contains all the endpoints for the PiShop API. The API is exposed at [http://shop.pilab.hu/api/v1](http://shop.pilab.hu/api/v1).  The API is based on [OpenAPI](https://swagger.io/specification/), which is a standard for the description of APIs.  # Webshop API Overview  This API provides access to the core functionalities of our webshop, allowing developers to integrate with our platform. Key features include:  * **Product Catalog:** Retrieve detailed information about our products, including descriptions, images, and pricing. * **Cart Management:** Add, remove, and update items in the user\'s cart. * **Order Management:** Create, update, and track customer orders. * **Customer Management:** Manage customer accounts and profiles. * **Discounts and Promotions:** Apply discounts and promotions to products. * **Image Management:** Upload and manage product images. * **Pages and Menus:** Create and manage pages and menus. * **Authentication:** Secure access to protected resources using Bearer authentication (JWT).  This documentation outlines the available endpoints, request/response formats, and authentication procedures. Use this information to build powerful integrations and enhance your customer experience. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: gyula@pilab.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ProductType
 */
export interface ProductType {
    /**
     * Unique identifier for the product type
     * @type {string}
     * @memberof ProductType
     */
    id: string;
    /**
     * URL-friendly handle
     * @type {string}
     * @memberof ProductType
     */
    handle: string;
    /**
     * Display name of the product type
     * @type {string}
     * @memberof ProductType
     */
    name: string;
    /**
     * Description of the product type
     * @type {string}
     * @memberof ProductType
     */
    description: string;
    /**
     * IDs of metadata fields associated with this product type
     * @type {Array<string>}
     * @memberof ProductType
     */
    metadataFieldIds: Array<string>;
    /**
     * Template suffix for custom templates
     * @type {string}
     * @memberof ProductType
     */
    templateSuffix: string;
    /**
     * 
     * @type {Date}
     * @memberof ProductType
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof ProductType
     */
    updatedAt: Date;
}

/**
 * Check if a given object implements the ProductType interface.
 */
export function instanceOfProductType(value: object): value is ProductType {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('handle' in value) || value['handle'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('metadataFieldIds' in value) || value['metadataFieldIds'] === undefined) return false;
    if (!('templateSuffix' in value) || value['templateSuffix'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function ProductTypeFromJSON(json: any): ProductType {
    return ProductTypeFromJSONTyped(json, false);
}

export function ProductTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductType {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'handle': json['handle'],
        'name': json['name'],
        'description': json['description'],
        'metadataFieldIds': json['metadataFieldIds'],
        'templateSuffix': json['templateSuffix'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function ProductTypeToJSON(json: any): ProductType {
    return ProductTypeToJSONTyped(json, false);
}

export function ProductTypeToJSONTyped(value?: ProductType | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'handle': value['handle'],
        'name': value['name'],
        'description': value['description'],
        'metadataFieldIds': value['metadataFieldIds'],
        'templateSuffix': value['templateSuffix'],
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
    };
}

