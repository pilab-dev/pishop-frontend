/* tslint:disable */
/* eslint-disable */
/**
 * PiShop REST API
 * This is the API documentation for PiShop.   It contains all the endpoints for the PiShop API. The API is exposed at [http://shop.pilab.hu/api/v1](http://shop.pilab.hu/api/v1).  The API is based on [OpenAPI](https://swagger.io/specification/), which is a standard for the description of APIs.  # Webshop API Overview  This API provides access to the core functionalities of our webshop, allowing developers to integrate with our platform. Key features include:  * **Product Catalog:** Retrieve detailed information about our products, including descriptions, images, and pricing. * **Cart Management:** Add, remove, and update items in the user\'s cart. * **Order Management:** Create, update, and track customer orders. * **Customer Management:** Manage customer accounts and profiles. * **Discounts and Promotions:** Apply discounts and promotions to products. * **Image Management:** Upload and manage product images. * **Pages and Menus:** Create and manage pages and menus. * **Authentication:** Secure access to protected resources using Bearer authentication (JWT).  This documentation outlines the available endpoints, request/response formats, and authentication procedures. Use this information to build powerful integrations and enhance your customer experience. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: gyula@pilab.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CartItemLine,
  CartResponse,
  Contact,
  CreateCart200Response,
  CreateCollection422Response,
  GenericError,
} from '../models/index';
import {
    CartItemLineFromJSON,
    CartItemLineToJSON,
    CartResponseFromJSON,
    CartResponseToJSON,
    ContactFromJSON,
    ContactToJSON,
    CreateCart200ResponseFromJSON,
    CreateCart200ResponseToJSON,
    CreateCollection422ResponseFromJSON,
    CreateCollection422ResponseToJSON,
    GenericErrorFromJSON,
    GenericErrorToJSON,
} from '../models/index';

export interface AddCartItemsRequest {
    cartId: string;
    xShopId?: string;
    cartItemLine?: Array<CartItemLine>;
}

export interface CreateCartRequest {
    xShopId?: string;
}

export interface GetCartRequest {
    cartId: string;
    xShopId?: string;
}

export interface RemoveCartItemsRequest {
    cartId: string;
    xShopId?: string;
    requestBody?: Array<string>;
}

export interface UpdateCartItemsRequest {
    cartId: string;
    xShopId?: string;
    cartItemLine?: Array<CartItemLine>;
}

export interface UpdateContactDetailsRequest {
    cartId: string;
    xShopId?: string;
    contact?: Contact;
}

/**
 * CartApi - interface
 * 
 * @export
 * @interface CartApiInterface
 */
export interface CartApiInterface {
    /**
     * 
     * @summary Add items to a cart
     * @param {string} cartId 
     * @param {string} [xShopId] 
     * @param {Array<CartItemLine>} [cartItemLine] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApiInterface
     */
    addCartItemsRaw(requestParameters: AddCartItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartResponse>>;

    /**
     * Add items to a cart
     */
    addCartItems(requestParameters: AddCartItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartResponse>;

    /**
     * 
     * @summary Create a new cart
     * @param {string} [xShopId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApiInterface
     */
    createCartRaw(requestParameters: CreateCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCart200Response>>;

    /**
     * Create a new cart
     */
    createCart(requestParameters: CreateCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCart200Response>;

    /**
     * 
     * @summary Get a cart by its ID
     * @param {string} cartId 
     * @param {string} [xShopId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApiInterface
     */
    getCartRaw(requestParameters: GetCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartResponse>>;

    /**
     * Get a cart by its ID
     */
    getCart(requestParameters: GetCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartResponse>;

    /**
     * 
     * @summary Remove items from a cart
     * @param {string} cartId 
     * @param {string} [xShopId] 
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApiInterface
     */
    removeCartItemsRaw(requestParameters: RemoveCartItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartResponse>>;

    /**
     * Remove items from a cart
     */
    removeCartItems(requestParameters: RemoveCartItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartResponse>;

    /**
     * 
     * @summary Update items in a cart
     * @param {string} cartId 
     * @param {string} [xShopId] 
     * @param {Array<CartItemLine>} [cartItemLine] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApiInterface
     */
    updateCartItemsRaw(requestParameters: UpdateCartItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartResponse>>;

    /**
     * Update items in a cart
     */
    updateCartItems(requestParameters: UpdateCartItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartResponse>;

    /**
     * 
     * @summary Update contact details, and address
     * @param {string} cartId 
     * @param {string} [xShopId] 
     * @param {Contact} [contact] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApiInterface
     */
    updateContactDetailsRaw(requestParameters: UpdateContactDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Update contact details, and address
     */
    updateContactDetails(requestParameters: UpdateContactDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class CartApi extends runtime.BaseAPI implements CartApiInterface {

    /**
     * Add items to a cart
     */
    async addCartItemsRaw(requestParameters: AddCartItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartResponse>> {
        if (requestParameters['cartId'] == null) {
            throw new runtime.RequiredError(
                'cartId',
                'Required parameter "cartId" was null or undefined when calling addCartItems().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xShopId'] != null) {
            headerParameters['x-shop-id'] = String(requestParameters['xShopId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/carts/{cartId}`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters['cartId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['cartItemLine']!.map(CartItemLineToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartResponseFromJSON(jsonValue));
    }

    /**
     * Add items to a cart
     */
    async addCartItems(requestParameters: AddCartItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartResponse> {
        const response = await this.addCartItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new cart
     */
    async createCartRaw(requestParameters: CreateCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCart200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xShopId'] != null) {
            headerParameters['x-shop-id'] = String(requestParameters['xShopId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/carts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCart200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a new cart
     */
    async createCart(requestParameters: CreateCartRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCart200Response> {
        const response = await this.createCartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a cart by its ID
     */
    async getCartRaw(requestParameters: GetCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartResponse>> {
        if (requestParameters['cartId'] == null) {
            throw new runtime.RequiredError(
                'cartId',
                'Required parameter "cartId" was null or undefined when calling getCart().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xShopId'] != null) {
            headerParameters['x-shop-id'] = String(requestParameters['xShopId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/carts/{cartId}`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters['cartId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartResponseFromJSON(jsonValue));
    }

    /**
     * Get a cart by its ID
     */
    async getCart(requestParameters: GetCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartResponse> {
        const response = await this.getCartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove items from a cart
     */
    async removeCartItemsRaw(requestParameters: RemoveCartItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartResponse>> {
        if (requestParameters['cartId'] == null) {
            throw new runtime.RequiredError(
                'cartId',
                'Required parameter "cartId" was null or undefined when calling removeCartItems().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xShopId'] != null) {
            headerParameters['x-shop-id'] = String(requestParameters['xShopId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/carts/{cartId}`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters['cartId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartResponseFromJSON(jsonValue));
    }

    /**
     * Remove items from a cart
     */
    async removeCartItems(requestParameters: RemoveCartItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartResponse> {
        const response = await this.removeCartItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update items in a cart
     */
    async updateCartItemsRaw(requestParameters: UpdateCartItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartResponse>> {
        if (requestParameters['cartId'] == null) {
            throw new runtime.RequiredError(
                'cartId',
                'Required parameter "cartId" was null or undefined when calling updateCartItems().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xShopId'] != null) {
            headerParameters['x-shop-id'] = String(requestParameters['xShopId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/carts/{cartId}`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters['cartId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['cartItemLine']!.map(CartItemLineToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartResponseFromJSON(jsonValue));
    }

    /**
     * Update items in a cart
     */
    async updateCartItems(requestParameters: UpdateCartItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartResponse> {
        const response = await this.updateCartItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update contact details, and address
     */
    async updateContactDetailsRaw(requestParameters: UpdateContactDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cartId'] == null) {
            throw new runtime.RequiredError(
                'cartId',
                'Required parameter "cartId" was null or undefined when calling updateContactDetails().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xShopId'] != null) {
            headerParameters['x-shop-id'] = String(requestParameters['xShopId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/carts/{cartId}/contact`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters['cartId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContactToJSON(requestParameters['contact']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update contact details, and address
     */
    async updateContactDetails(requestParameters: UpdateContactDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateContactDetailsRaw(requestParameters, initOverrides);
    }

}
