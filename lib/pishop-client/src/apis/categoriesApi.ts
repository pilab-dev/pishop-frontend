/* tslint:disable */
/* eslint-disable */
/**
 * PiShop REST API
 * This is the API documentation for PiShop.   It contains all the endpoints for the PiShop API. The API is exposed at [http://shop.pilab.hu/api/v1](http://shop.pilab.hu/api/v1).  The API is based on [OpenAPI](https://swagger.io/specification/), which is a standard for the description of APIs.  # Webshop API Overview  This API provides access to the core functionalities of our webshop, allowing developers to integrate with our platform. Key features include:  * **Product Catalog:** Retrieve detailed information about our products, including descriptions, images, and pricing. * **Cart Management:** Add, remove, and update items in the user\'s cart. * **Order Management:** Create, update, and track customer orders. * **Customer Management:** Manage customer accounts and profiles. * **Discounts and Promotions:** Apply discounts and promotions to products. * **Image Management:** Upload and manage product images. * **Pages and Menus:** Create and manage pages and menus. * **Authentication:** Secure access to protected resources using Bearer authentication (JWT).  This documentation outlines the available endpoints, request/response formats, and authentication procedures. Use this information to build powerful integrations and enhance your customer experience. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: gyula@pilab.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Category,
  CreateCollection422Response,
  GenericError,
} from '../models/index';
import {
    CategoryFromJSON,
    CategoryToJSON,
    CreateCollection422ResponseFromJSON,
    CreateCollection422ResponseToJSON,
    GenericErrorFromJSON,
    GenericErrorToJSON,
} from '../models/index';

export interface CreateCategoryRequest {
    xShopId?: string;
    category?: Category;
}

export interface DeleteCategoryByIdRequest {
    categoryId: string;
    xShopId?: string;
}

export interface GetCategoryByIdRequest {
    categoryId: string;
    xShopId?: string;
}

export interface ListCategoriesRequest {
    xShopId?: string;
}

export interface UpdateCategoryByIdRequest {
    categoryId: string;
    category: Category;
    xShopId?: string;
}

/**
 * CategoriesApi - interface
 * 
 * @export
 * @interface CategoriesApiInterface
 */
export interface CategoriesApiInterface {
    /**
     * 
     * @summary Create a new category
     * @param {string} [xShopId] 
     * @param {Category} [category] Create a new collection request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    createCategoryRaw(requestParameters: CreateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Category>>;

    /**
     * Create a new category
     */
    createCategory(requestParameters: CreateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Category>;

    /**
     * 
     * @summary Delete a category
     * @param {string} categoryId 
     * @param {string} [xShopId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    deleteCategoryByIdRaw(requestParameters: DeleteCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a category
     */
    deleteCategoryById(requestParameters: DeleteCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Get category by it\'s id 
     * @summary Get category by it\'s id
     * @param {string} categoryId 
     * @param {string} [xShopId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    getCategoryByIdRaw(requestParameters: GetCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Category>>;

    /**
     * Get category by it\'s id 
     * Get category by it\'s id
     */
    getCategoryById(requestParameters: GetCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Category>;

    /**
     * 
     * @summary List all categories
     * @param {string} [xShopId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    listCategoriesRaw(requestParameters: ListCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Category>>>;

    /**
     * List all categories
     */
    listCategories(requestParameters: ListCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Category>>;

    /**
     * 
     * @summary Update a category
     * @param {string} categoryId 
     * @param {Category} category Request body for updating a category
     * @param {string} [xShopId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    updateCategoryByIdRaw(requestParameters: UpdateCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Category>>;

    /**
     * Update a category
     */
    updateCategoryById(requestParameters: UpdateCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Category>;

}

/**
 * 
 */
export class CategoriesApi extends runtime.BaseAPI implements CategoriesApiInterface {

    /**
     * Create a new category
     */
    async createCategoryRaw(requestParameters: CreateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Category>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xShopId'] != null) {
            headerParameters['x-shop-id'] = String(requestParameters['xShopId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/categories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CategoryToJSON(requestParameters['category']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryFromJSON(jsonValue));
    }

    /**
     * Create a new category
     */
    async createCategory(requestParameters: CreateCategoryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Category> {
        const response = await this.createCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a category
     */
    async deleteCategoryByIdRaw(requestParameters: DeleteCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling deleteCategoryById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xShopId'] != null) {
            headerParameters['x-shop-id'] = String(requestParameters['xShopId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/categories/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters['categoryId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a category
     */
    async deleteCategoryById(requestParameters: DeleteCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCategoryByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Get category by it\'s id 
     * Get category by it\'s id
     */
    async getCategoryByIdRaw(requestParameters: GetCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Category>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling getCategoryById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xShopId'] != null) {
            headerParameters['x-shop-id'] = String(requestParameters['xShopId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/categories/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters['categoryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryFromJSON(jsonValue));
    }

    /**
     * Get category by it\'s id 
     * Get category by it\'s id
     */
    async getCategoryById(requestParameters: GetCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Category> {
        const response = await this.getCategoryByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all categories
     */
    async listCategoriesRaw(requestParameters: ListCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Category>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xShopId'] != null) {
            headerParameters['x-shop-id'] = String(requestParameters['xShopId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CategoryFromJSON));
    }

    /**
     * List all categories
     */
    async listCategories(requestParameters: ListCategoriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Category>> {
        const response = await this.listCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a category
     */
    async updateCategoryByIdRaw(requestParameters: UpdateCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Category>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling updateCategoryById().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling updateCategoryById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xShopId'] != null) {
            headerParameters['x-shop-id'] = String(requestParameters['xShopId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/categories/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters['categoryId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CategoryToJSON(requestParameters['category']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryFromJSON(jsonValue));
    }

    /**
     * Update a category
     */
    async updateCategoryById(requestParameters: UpdateCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Category> {
        const response = await this.updateCategoryByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
