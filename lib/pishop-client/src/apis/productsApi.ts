/* tslint:disable */
/* eslint-disable */
/**
 * PiShop REST API
 * This is the API documentation for PiShop.   It contains all the endpoints for the PiShop API. The API is exposed at [http://shop.pilab.hu/api/v1](http://shop.pilab.hu/api/v1).  The API is based on [OpenAPI](https://swagger.io/specification/), which is a standard for the description of APIs.  # Webshop API Overview  This API provides access to the core functionalities of our webshop, allowing developers to integrate with our platform. Key features include:  * **Product Catalog:** Retrieve detailed information about our products, including descriptions, images, and pricing. * **Cart Management:** Add, remove, and update items in the user\'s cart. * **Order Management:** Create, update, and track customer orders. * **Customer Management:** Manage customer accounts and profiles. * **Discounts and Promotions:** Apply discounts and promotions to products. * **Image Management:** Upload and manage product images. * **Pages and Menus:** Create and manage pages and menus. * **Authentication:** Secure access to protected resources using Bearer authentication (JWT).  This documentation outlines the available endpoints, request/response formats, and authentication procedures. Use this information to build powerful integrations and enhance your customer experience. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: gyula@pilab.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GenericError,
  Product,
} from '../models/index';
import {
    GenericErrorFromJSON,
    GenericErrorToJSON,
    ProductFromJSON,
    ProductToJSON,
} from '../models/index';

export interface CreateProductRequest {
    xShopId?: string;
    product?: Product;
}

export interface GetProductByHandleRequest {
    handle: string;
}

export interface ListProductsRequest {
    xShopId?: string;
}

export interface UpdateProductByHandleRequest {
    handle: string;
    product?: Product;
}

/**
 * ProductsApi - interface
 * 
 * @export
 * @interface ProductsApiInterface
 */
export interface ProductsApiInterface {
    /**
     * 
     * @summary Create a new product
     * @param {string} [xShopId] 
     * @param {Product} [product] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    createProductRaw(requestParameters: CreateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>>;

    /**
     * Create a new product
     */
    createProduct(requestParameters: CreateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product>;

    /**
     * 
     * @summary Get a product by its handle
     * @param {string} handle 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    getProductByHandleRaw(requestParameters: GetProductByHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>>;

    /**
     * Get a product by its handle
     */
    getProductByHandle(requestParameters: GetProductByHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product>;

    /**
     * Using this endpoint you can retrieve a list of all products from the database, which is active, visible and has a valid price range.  The endpoint is paginated and returns a maximum of **50** products per page, and the calls are Rate-Limited to ***5 requests***  per minute, with a maximum of ***100 requests*** per day.  ---  The response contains the following fields: * `id`: A unique identifier for the product. * `handle`: The handle of the product. * `title`: The title of the product. * `description`: The description of the product. * `descriptionHtml`: The description of the product in HTML format. * `price`: The actual price of the product. * `compareAtPrice`: The price which is the original price when discount applies. * `taxPercent`: The tax percentage for the product. * `availableForSale`: Whether the product is available for sale. * `categoryId`: The ID of the category that the product belongs to. * `brandId`: The ID of the brand that the product belongs to. * `productTypeId`: ID of the product type * `customFields`: Values for custom fields defined by the product type\'s metadata fields * `variants`: List of variants for this product * `images`: List of images for this product * `createdAt`: The date and time when the product was created. * `updatedAt`: The date and time when the product was last updated. 
     * @summary List all products
     * @param {string} [xShopId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    listProductsRaw(requestParameters: ListProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Product>>>;

    /**
     * Using this endpoint you can retrieve a list of all products from the database, which is active, visible and has a valid price range.  The endpoint is paginated and returns a maximum of **50** products per page, and the calls are Rate-Limited to ***5 requests***  per minute, with a maximum of ***100 requests*** per day.  ---  The response contains the following fields: * `id`: A unique identifier for the product. * `handle`: The handle of the product. * `title`: The title of the product. * `description`: The description of the product. * `descriptionHtml`: The description of the product in HTML format. * `price`: The actual price of the product. * `compareAtPrice`: The price which is the original price when discount applies. * `taxPercent`: The tax percentage for the product. * `availableForSale`: Whether the product is available for sale. * `categoryId`: The ID of the category that the product belongs to. * `brandId`: The ID of the brand that the product belongs to. * `productTypeId`: ID of the product type * `customFields`: Values for custom fields defined by the product type\'s metadata fields * `variants`: List of variants for this product * `images`: List of images for this product * `createdAt`: The date and time when the product was created. * `updatedAt`: The date and time when the product was last updated. 
     * List all products
     */
    listProducts(requestParameters: ListProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Product>>;

    /**
     * 
     * @summary Update a product by its handle
     * @param {string} handle 
     * @param {Product} [product] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    updateProductByHandleRaw(requestParameters: UpdateProductByHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>>;

    /**
     * Update a product by its handle
     */
    updateProductByHandle(requestParameters: UpdateProductByHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product>;

}

/**
 * 
 */
export class ProductsApi extends runtime.BaseAPI implements ProductsApiInterface {

    /**
     * Create a new product
     */
    async createProductRaw(requestParameters: CreateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xShopId'] != null) {
            headerParameters['x-shop-id'] = String(requestParameters['xShopId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/products`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductToJSON(requestParameters['product']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     * Create a new product
     */
    async createProduct(requestParameters: CreateProductRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product> {
        const response = await this.createProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a product by its handle
     */
    async getProductByHandleRaw(requestParameters: GetProductByHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>> {
        if (requestParameters['handle'] == null) {
            throw new runtime.RequiredError(
                'handle',
                'Required parameter "handle" was null or undefined when calling getProductByHandle().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/product/{handle}`.replace(`{${"handle"}}`, encodeURIComponent(String(requestParameters['handle']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     * Get a product by its handle
     */
    async getProductByHandle(requestParameters: GetProductByHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product> {
        const response = await this.getProductByHandleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Using this endpoint you can retrieve a list of all products from the database, which is active, visible and has a valid price range.  The endpoint is paginated and returns a maximum of **50** products per page, and the calls are Rate-Limited to ***5 requests***  per minute, with a maximum of ***100 requests*** per day.  ---  The response contains the following fields: * `id`: A unique identifier for the product. * `handle`: The handle of the product. * `title`: The title of the product. * `description`: The description of the product. * `descriptionHtml`: The description of the product in HTML format. * `price`: The actual price of the product. * `compareAtPrice`: The price which is the original price when discount applies. * `taxPercent`: The tax percentage for the product. * `availableForSale`: Whether the product is available for sale. * `categoryId`: The ID of the category that the product belongs to. * `brandId`: The ID of the brand that the product belongs to. * `productTypeId`: ID of the product type * `customFields`: Values for custom fields defined by the product type\'s metadata fields * `variants`: List of variants for this product * `images`: List of images for this product * `createdAt`: The date and time when the product was created. * `updatedAt`: The date and time when the product was last updated. 
     * List all products
     */
    async listProductsRaw(requestParameters: ListProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Product>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xShopId'] != null) {
            headerParameters['x-shop-id'] = String(requestParameters['xShopId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/products`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductFromJSON));
    }

    /**
     * Using this endpoint you can retrieve a list of all products from the database, which is active, visible and has a valid price range.  The endpoint is paginated and returns a maximum of **50** products per page, and the calls are Rate-Limited to ***5 requests***  per minute, with a maximum of ***100 requests*** per day.  ---  The response contains the following fields: * `id`: A unique identifier for the product. * `handle`: The handle of the product. * `title`: The title of the product. * `description`: The description of the product. * `descriptionHtml`: The description of the product in HTML format. * `price`: The actual price of the product. * `compareAtPrice`: The price which is the original price when discount applies. * `taxPercent`: The tax percentage for the product. * `availableForSale`: Whether the product is available for sale. * `categoryId`: The ID of the category that the product belongs to. * `brandId`: The ID of the brand that the product belongs to. * `productTypeId`: ID of the product type * `customFields`: Values for custom fields defined by the product type\'s metadata fields * `variants`: List of variants for this product * `images`: List of images for this product * `createdAt`: The date and time when the product was created. * `updatedAt`: The date and time when the product was last updated. 
     * List all products
     */
    async listProducts(requestParameters: ListProductsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Product>> {
        const response = await this.listProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a product by its handle
     */
    async updateProductByHandleRaw(requestParameters: UpdateProductByHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>> {
        if (requestParameters['handle'] == null) {
            throw new runtime.RequiredError(
                'handle',
                'Required parameter "handle" was null or undefined when calling updateProductByHandle().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/product/{handle}`.replace(`{${"handle"}}`, encodeURIComponent(String(requestParameters['handle']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProductToJSON(requestParameters['product']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     * Update a product by its handle
     */
    async updateProductByHandle(requestParameters: UpdateProductByHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product> {
        const response = await this.updateProductByHandleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
