/* tslint:disable */
/* eslint-disable */
/**
 * PiShop REST API
 * This is the API documentation for PiShop.   It contains all the endpoints for the PiShop API. The API is exposed at [http://shop.pilab.hu/api/v1](http://shop.pilab.hu/api/v1).  The API is based on [OpenAPI](https://swagger.io/specification/), which is a standard for the description of APIs.  # Webshop API Overview  This API provides access to the core functionalities of our webshop, allowing developers to integrate with our platform. Key features include:  * **Product Catalog:** Retrieve detailed information about our products, including descriptions, images, and pricing. * **Cart Management:** Add, remove, and update items in the user\'s cart. * **Order Management:** Create, update, and track customer orders. * **Customer Management:** Manage customer accounts and profiles. * **Discounts and Promotions:** Apply discounts and promotions to products. * **Image Management:** Upload and manage product images. * **Pages and Menus:** Create and manage pages and menus. * **Authentication:** Secure access to protected resources using Bearer authentication (JWT).  This documentation outlines the available endpoints, request/response formats, and authentication procedures. Use this information to build powerful integrations and enhance your customer experience. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: gyula@pilab.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProductType,
  ProductTypeInput,
} from '../models/index';
import {
    ProductTypeFromJSON,
    ProductTypeToJSON,
    ProductTypeInputFromJSON,
    ProductTypeInputToJSON,
} from '../models/index';

export interface CreateProductTypeRequest {
    productTypeInput: ProductTypeInput;
    xShopId?: string;
}

export interface DeleteProductTypeRequest {
    handle: string;
    xShopId?: string;
}

export interface GetProductTypeRequest {
    handle: string;
    xShopId?: string;
}

export interface ListProductTypesRequest {
    xShopId?: string;
}

export interface UpdateProductTypeRequest {
    handle: string;
    productTypeInput: ProductTypeInput;
    xShopId?: string;
}

/**
 * ProductTypesApi - interface
 * 
 * @export
 * @interface ProductTypesApiInterface
 */
export interface ProductTypesApiInterface {
    /**
     * 
     * @summary Create a new product type
     * @param {ProductTypeInput} productTypeInput 
     * @param {string} [xShopId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    createProductTypeRaw(requestParameters: CreateProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductType>>;

    /**
     * Create a new product type
     */
    createProductType(requestParameters: CreateProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductType>;

    /**
     * 
     * @summary Delete a product type
     * @param {string} handle 
     * @param {string} [xShopId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    deleteProductTypeRaw(requestParameters: DeleteProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a product type
     */
    deleteProductType(requestParameters: DeleteProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get a product type by handle
     * @param {string} handle 
     * @param {string} [xShopId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    getProductTypeRaw(requestParameters: GetProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductType>>;

    /**
     * Get a product type by handle
     */
    getProductType(requestParameters: GetProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductType>;

    /**
     * 
     * @summary List all product types
     * @param {string} [xShopId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    listProductTypesRaw(requestParameters: ListProductTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductType>>>;

    /**
     * List all product types
     */
    listProductTypes(requestParameters: ListProductTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductType>>;

    /**
     * 
     * @summary Update a product type
     * @param {string} handle 
     * @param {ProductTypeInput} productTypeInput 
     * @param {string} [xShopId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    updateProductTypeRaw(requestParameters: UpdateProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductType>>;

    /**
     * Update a product type
     */
    updateProductType(requestParameters: UpdateProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductType>;

}

/**
 * 
 */
export class ProductTypesApi extends runtime.BaseAPI implements ProductTypesApiInterface {

    /**
     * Create a new product type
     */
    async createProductTypeRaw(requestParameters: CreateProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductType>> {
        if (requestParameters['productTypeInput'] == null) {
            throw new runtime.RequiredError(
                'productTypeInput',
                'Required parameter "productTypeInput" was null or undefined when calling createProductType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xShopId'] != null) {
            headerParameters['x-shop-id'] = String(requestParameters['xShopId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/product-types`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductTypeInputToJSON(requestParameters['productTypeInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductTypeFromJSON(jsonValue));
    }

    /**
     * Create a new product type
     */
    async createProductType(requestParameters: CreateProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductType> {
        const response = await this.createProductTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a product type
     */
    async deleteProductTypeRaw(requestParameters: DeleteProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['handle'] == null) {
            throw new runtime.RequiredError(
                'handle',
                'Required parameter "handle" was null or undefined when calling deleteProductType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xShopId'] != null) {
            headerParameters['x-shop-id'] = String(requestParameters['xShopId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/product-types/{handle}`.replace(`{${"handle"}}`, encodeURIComponent(String(requestParameters['handle']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a product type
     */
    async deleteProductType(requestParameters: DeleteProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProductTypeRaw(requestParameters, initOverrides);
    }

    /**
     * Get a product type by handle
     */
    async getProductTypeRaw(requestParameters: GetProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductType>> {
        if (requestParameters['handle'] == null) {
            throw new runtime.RequiredError(
                'handle',
                'Required parameter "handle" was null or undefined when calling getProductType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xShopId'] != null) {
            headerParameters['x-shop-id'] = String(requestParameters['xShopId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/product-types/{handle}`.replace(`{${"handle"}}`, encodeURIComponent(String(requestParameters['handle']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductTypeFromJSON(jsonValue));
    }

    /**
     * Get a product type by handle
     */
    async getProductType(requestParameters: GetProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductType> {
        const response = await this.getProductTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all product types
     */
    async listProductTypesRaw(requestParameters: ListProductTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductType>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xShopId'] != null) {
            headerParameters['x-shop-id'] = String(requestParameters['xShopId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/product-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductTypeFromJSON));
    }

    /**
     * List all product types
     */
    async listProductTypes(requestParameters: ListProductTypesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductType>> {
        const response = await this.listProductTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a product type
     */
    async updateProductTypeRaw(requestParameters: UpdateProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductType>> {
        if (requestParameters['handle'] == null) {
            throw new runtime.RequiredError(
                'handle',
                'Required parameter "handle" was null or undefined when calling updateProductType().'
            );
        }

        if (requestParameters['productTypeInput'] == null) {
            throw new runtime.RequiredError(
                'productTypeInput',
                'Required parameter "productTypeInput" was null or undefined when calling updateProductType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xShopId'] != null) {
            headerParameters['x-shop-id'] = String(requestParameters['xShopId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/product-types/{handle}`.replace(`{${"handle"}}`, encodeURIComponent(String(requestParameters['handle']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductTypeInputToJSON(requestParameters['productTypeInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductTypeFromJSON(jsonValue));
    }

    /**
     * Update a product type
     */
    async updateProductType(requestParameters: UpdateProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductType> {
        const response = await this.updateProductTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
