/* tslint:disable */
/* eslint-disable */
/**
 * PiShop REST API
 * This is the API documentation for PiShop.   It contains all the endpoints for the PiShop API. The API is exposed at [http://shop.pilab.hu/api/v1](http://shop.pilab.hu/api/v1).  The API is based on [OpenAPI](https://swagger.io/specification/), which is a standard for the description of APIs.  # Webshop API Overview  This API provides access to the core functionalities of our webshop, allowing developers to integrate with our platform. Key features include:  * **Product Catalog:** Retrieve detailed information about our products, including descriptions, images, and pricing. * **Cart Management:** Add, remove, and update items in the user\'s cart. * **Order Management:** Create, update, and track customer orders. * **Customer Management:** Manage customer accounts and profiles. * **Discounts and Promotions:** Apply discounts and promotions to products. * **Image Management:** Upload and manage product images. * **Pages and Menus:** Create and manage pages and menus. * **Authentication:** Secure access to protected resources using Bearer authentication (JWT).  This documentation outlines the available endpoints, request/response formats, and authentication procedures. Use this information to build powerful integrations and enhance your customer experience. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: gyula@pilab.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UploadedImage,
} from '../models/index';
import {
    UploadedImageFromJSON,
    UploadedImageToJSON,
} from '../models/index';

export interface GetResizedImageRequest {
    w: number;
    q: number;
    url: string;
    h?: number;
}

export interface ResizeAndUploadRequest {
    file?: Blob;
    width?: number;
    height?: number;
}

/**
 * ImagesApi - interface
 * 
 * @export
 * @interface ImagesApiInterface
 */
export interface ImagesApiInterface {
    /**
     * 
     * @summary Get a resized image
     * @param {number} w 
     * @param {number} q 
     * @param {string} url 
     * @param {number} [h] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiInterface
     */
    getResizedImageRaw(requestParameters: GetResizedImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Get a resized image
     */
    getResizedImage(requestParameters: GetResizedImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * 
     * @summary Upload and resize an image
     * @param {Blob} [file] 
     * @param {number} [width] 
     * @param {number} [height] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiInterface
     */
    resizeAndUploadRaw(requestParameters: ResizeAndUploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadedImage>>;

    /**
     * Upload and resize an image
     */
    resizeAndUpload(requestParameters: ResizeAndUploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadedImage>;

}

/**
 * 
 */
export class ImagesApi extends runtime.BaseAPI implements ImagesApiInterface {

    /**
     * Get a resized image
     */
    async getResizedImageRaw(requestParameters: GetResizedImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['w'] == null) {
            throw new runtime.RequiredError(
                'w',
                'Required parameter "w" was null or undefined when calling getResizedImage().'
            );
        }

        if (requestParameters['q'] == null) {
            throw new runtime.RequiredError(
                'q',
                'Required parameter "q" was null or undefined when calling getResizedImage().'
            );
        }

        if (requestParameters['url'] == null) {
            throw new runtime.RequiredError(
                'url',
                'Required parameter "url" was null or undefined when calling getResizedImage().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['w'] != null) {
            queryParameters['w'] = requestParameters['w'];
        }

        if (requestParameters['h'] != null) {
            queryParameters['h'] = requestParameters['h'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/image`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Get a resized image
     */
    async getResizedImage(requestParameters: GetResizedImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getResizedImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload and resize an image
     */
    async resizeAndUploadRaw(requestParameters: ResizeAndUploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadedImage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        if (requestParameters['width'] != null) {
            formParams.append('width', requestParameters['width'] as any);
        }

        if (requestParameters['height'] != null) {
            formParams.append('height', requestParameters['height'] as any);
        }

        const response = await this.request({
            path: `/images/upload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadedImageFromJSON(jsonValue));
    }

    /**
     * Upload and resize an image
     */
    async resizeAndUpload(requestParameters: ResizeAndUploadRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadedImage> {
        const response = await this.resizeAndUploadRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
