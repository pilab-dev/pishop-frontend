/* tslint:disable */
/* eslint-disable */
/**
 * PiShop REST API
 * This is the API documentation for PiShop.   It contains all the endpoints for the PiShop API. The API is exposed at [http://shop.pilab.hu/api/v1](http://shop.pilab.hu/api/v1).  The API is based on [OpenAPI](https://swagger.io/specification/), which is a standard for the description of APIs.  # Webshop API Overview  This API provides access to the core functionalities of our webshop, allowing developers to integrate with our platform. Key features include:  * **Product Catalog:** Retrieve detailed information about our products, including descriptions, images, and pricing. * **Cart Management:** Add, remove, and update items in the user\'s cart. * **Order Management:** Create, update, and track customer orders. * **Customer Management:** Manage customer accounts and profiles. * **Discounts and Promotions:** Apply discounts and promotions to products. * **Image Management:** Upload and manage product images. * **Pages and Menus:** Create and manage pages and menus. * **Authentication:** Secure access to protected resources using Bearer authentication (JWT).  This documentation outlines the available endpoints, request/response formats, and authentication procedures. Use this information to build powerful integrations and enhance your customer experience. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: gyula@pilab.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MetadataField,
  MetadataFieldInput,
} from '../models/index';
import {
    MetadataFieldFromJSON,
    MetadataFieldToJSON,
    MetadataFieldInputFromJSON,
    MetadataFieldInputToJSON,
} from '../models/index';

export interface CreateMetadataFieldRequest {
    metadataFieldInput: MetadataFieldInput;
}

export interface DeleteMetadataFieldRequest {
    id: string;
    xShopId?: string;
}

export interface GetMetadataFieldRequest {
    id: string;
    xShopId?: string;
}

export interface UpdateMetadataFieldRequest {
    id: string;
    metadataFieldInput: MetadataFieldInput;
    xShopId?: string;
}

/**
 * MetadataApi - interface
 * 
 * @export
 * @interface MetadataApiInterface
 */
export interface MetadataApiInterface {
    /**
     * 
     * @summary Create a new metadata field
     * @param {MetadataFieldInput} metadataFieldInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiInterface
     */
    createMetadataFieldRaw(requestParameters: CreateMetadataFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetadataField>>;

    /**
     * Create a new metadata field
     */
    createMetadataField(requestParameters: CreateMetadataFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetadataField>;

    /**
     * 
     * @summary Delete a metadata field
     * @param {string} id 
     * @param {string} [xShopId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiInterface
     */
    deleteMetadataFieldRaw(requestParameters: DeleteMetadataFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a metadata field
     */
    deleteMetadataField(requestParameters: DeleteMetadataFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get a metadata field
     * @param {string} id 
     * @param {string} [xShopId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiInterface
     */
    getMetadataFieldRaw(requestParameters: GetMetadataFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetadataField>>;

    /**
     * Get a metadata field
     */
    getMetadataField(requestParameters: GetMetadataFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetadataField>;

    /**
     * 
     * @summary List all metadata fields
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiInterface
     */
    listMetadataFieldsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MetadataField>>>;

    /**
     * List all metadata fields
     */
    listMetadataFields(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MetadataField>>;

    /**
     * 
     * @summary Update a metadata field
     * @param {string} id 
     * @param {MetadataFieldInput} metadataFieldInput 
     * @param {string} [xShopId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiInterface
     */
    updateMetadataFieldRaw(requestParameters: UpdateMetadataFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetadataField>>;

    /**
     * Update a metadata field
     */
    updateMetadataField(requestParameters: UpdateMetadataFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetadataField>;

}

/**
 * 
 */
export class MetadataApi extends runtime.BaseAPI implements MetadataApiInterface {

    /**
     * Create a new metadata field
     */
    async createMetadataFieldRaw(requestParameters: CreateMetadataFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetadataField>> {
        if (requestParameters['metadataFieldInput'] == null) {
            throw new runtime.RequiredError(
                'metadataFieldInput',
                'Required parameter "metadataFieldInput" was null or undefined when calling createMetadataField().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/metadata`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MetadataFieldInputToJSON(requestParameters['metadataFieldInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetadataFieldFromJSON(jsonValue));
    }

    /**
     * Create a new metadata field
     */
    async createMetadataField(requestParameters: CreateMetadataFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetadataField> {
        const response = await this.createMetadataFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a metadata field
     */
    async deleteMetadataFieldRaw(requestParameters: DeleteMetadataFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteMetadataField().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xShopId'] != null) {
            headerParameters['x-shop-id'] = String(requestParameters['xShopId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/metadata/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a metadata field
     */
    async deleteMetadataField(requestParameters: DeleteMetadataFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMetadataFieldRaw(requestParameters, initOverrides);
    }

    /**
     * Get a metadata field
     */
    async getMetadataFieldRaw(requestParameters: GetMetadataFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetadataField>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMetadataField().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xShopId'] != null) {
            headerParameters['x-shop-id'] = String(requestParameters['xShopId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/metadata/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetadataFieldFromJSON(jsonValue));
    }

    /**
     * Get a metadata field
     */
    async getMetadataField(requestParameters: GetMetadataFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetadataField> {
        const response = await this.getMetadataFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all metadata fields
     */
    async listMetadataFieldsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MetadataField>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/metadata`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MetadataFieldFromJSON));
    }

    /**
     * List all metadata fields
     */
    async listMetadataFields(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MetadataField>> {
        const response = await this.listMetadataFieldsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update a metadata field
     */
    async updateMetadataFieldRaw(requestParameters: UpdateMetadataFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetadataField>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateMetadataField().'
            );
        }

        if (requestParameters['metadataFieldInput'] == null) {
            throw new runtime.RequiredError(
                'metadataFieldInput',
                'Required parameter "metadataFieldInput" was null or undefined when calling updateMetadataField().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xShopId'] != null) {
            headerParameters['x-shop-id'] = String(requestParameters['xShopId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/metadata/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MetadataFieldInputToJSON(requestParameters['metadataFieldInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetadataFieldFromJSON(jsonValue));
    }

    /**
     * Update a metadata field
     */
    async updateMetadataField(requestParameters: UpdateMetadataFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetadataField> {
        const response = await this.updateMetadataFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
