/* tslint:disable */
/* eslint-disable */
/**
 * PiShop REST API
 * This is the API documentation for PiShop.   It contains all the endpoints for the PiShop API. The API is exposed at [http://shop.pilab.hu/api/v1](http://shop.pilab.hu/api/v1).  The API is based on [OpenAPI](https://swagger.io/specification/), which is a standard for the description of APIs.  # Webshop API Overview  This API provides access to the core functionalities of our webshop, allowing developers to integrate with our platform. Key features include:  * **Product Catalog:** Retrieve detailed information about our products, including descriptions, images, and pricing. * **Cart Management:** Add, remove, and update items in the user\'s cart. * **Order Management:** Create, update, and track customer orders. * **Customer Management:** Manage customer accounts and profiles. * **Discounts and Promotions:** Apply discounts and promotions to products. * **Image Management:** Upload and manage product images. * **Pages and Menus:** Create and manage pages and menus. * **Authentication:** Secure access to protected resources using Bearer authentication (JWT).  This documentation outlines the available endpoints, request/response formats, and authentication procedures. Use this information to build powerful integrations and enhance your customer experience. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: gyula@pilab.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddProductsToCollectionRequest,
  Collection,
  CreateCollection422Response,
  EntityCreated,
  GenericError,
  Product,
} from '../models/index';
import {
    AddProductsToCollectionRequestFromJSON,
    AddProductsToCollectionRequestToJSON,
    CollectionFromJSON,
    CollectionToJSON,
    CreateCollection422ResponseFromJSON,
    CreateCollection422ResponseToJSON,
    EntityCreatedFromJSON,
    EntityCreatedToJSON,
    GenericErrorFromJSON,
    GenericErrorToJSON,
    ProductFromJSON,
    ProductToJSON,
} from '../models/index';

export interface AddProductsToCollectionOperationRequest {
    handle: string;
    xShopId?: string;
    addProductsToCollectionRequest?: AddProductsToCollectionRequest;
}

export interface CreateCollectionRequest {
    xShopId?: string;
    collection?: Collection;
}

export interface GetCollectionByHandleRequest {
    handle: string;
    xShopId?: string;
}

export interface ListCollectionProductsRequest {
    handle: string;
}

export interface ListCollectionsRequest {
    xShopId?: string;
}

export interface UpdateCollectionByHandleRequest {
    handle: string;
    collection: Collection;
    xShopId?: string;
}

/**
 * CollectionsApi - interface
 * 
 * @export
 * @interface CollectionsApiInterface
 */
export interface CollectionsApiInterface {
    /**
     * 
     * @summary Add products to a collection
     * @param {string} handle Collection handle is a human-readable unique handle for the collection, in a slug format
     * @param {string} [xShopId] 
     * @param {AddProductsToCollectionRequest} [addProductsToCollectionRequest] Add products to a collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApiInterface
     */
    addProductsToCollectionRaw(requestParameters: AddProductsToCollectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Add products to a collection
     */
    addProductsToCollection(requestParameters: AddProductsToCollectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Create a collection
     * @param {string} [xShopId] 
     * @param {Collection} [collection] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApiInterface
     */
    createCollectionRaw(requestParameters: CreateCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityCreated>>;

    /**
     * Create a collection
     */
    createCollection(requestParameters: CreateCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityCreated>;

    /**
     * Get collection by handle *(a slugged handle)* format. The collection will be returned in the response, but without the products. 
     * @summary Get collection by handle
     * @param {string} handle Collection handle is a human-readable unique handle for the collection, in a slug format
     * @param {string} [xShopId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApiInterface
     */
    getCollectionByHandleRaw(requestParameters: GetCollectionByHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Collection>>;

    /**
     * Get collection by handle *(a slugged handle)* format. The collection will be returned in the response, but without the products. 
     * Get collection by handle
     */
    getCollectionByHandle(requestParameters: GetCollectionByHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Collection>;

    /**
     * 
     * @summary List products in a collection
     * @param {string} handle 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApiInterface
     */
    listCollectionProductsRaw(requestParameters: ListCollectionProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Product>>>;

    /**
     * List products in a collection
     */
    listCollectionProducts(requestParameters: ListCollectionProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Product>>;

    /**
     * 
     * @summary List all collections
     * @param {string} [xShopId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApiInterface
     */
    listCollectionsRaw(requestParameters: ListCollectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Collection>>>;

    /**
     * List all collections
     */
    listCollections(requestParameters: ListCollectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Collection>>;

    /**
     * 
     * @summary Update a collection
     * @param {string} handle Collection handle is a human-readable unique handle for the collection, in a slug format
     * @param {Collection} collection Request body for updating a collection
     * @param {string} [xShopId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApiInterface
     */
    updateCollectionByHandleRaw(requestParameters: UpdateCollectionByHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Collection>>;

    /**
     * Update a collection
     */
    updateCollectionByHandle(requestParameters: UpdateCollectionByHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Collection>;

}

/**
 * 
 */
export class CollectionsApi extends runtime.BaseAPI implements CollectionsApiInterface {

    /**
     * Add products to a collection
     */
    async addProductsToCollectionRaw(requestParameters: AddProductsToCollectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['handle'] == null) {
            throw new runtime.RequiredError(
                'handle',
                'Required parameter "handle" was null or undefined when calling addProductsToCollection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xShopId'] != null) {
            headerParameters['x-shop-id'] = String(requestParameters['xShopId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/collections/{handle}`.replace(`{${"handle"}}`, encodeURIComponent(String(requestParameters['handle']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddProductsToCollectionRequestToJSON(requestParameters['addProductsToCollectionRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add products to a collection
     */
    async addProductsToCollection(requestParameters: AddProductsToCollectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addProductsToCollectionRaw(requestParameters, initOverrides);
    }

    /**
     * Create a collection
     */
    async createCollectionRaw(requestParameters: CreateCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityCreated>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xShopId'] != null) {
            headerParameters['x-shop-id'] = String(requestParameters['xShopId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/collections`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CollectionToJSON(requestParameters['collection']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityCreatedFromJSON(jsonValue));
    }

    /**
     * Create a collection
     */
    async createCollection(requestParameters: CreateCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityCreated> {
        const response = await this.createCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get collection by handle *(a slugged handle)* format. The collection will be returned in the response, but without the products. 
     * Get collection by handle
     */
    async getCollectionByHandleRaw(requestParameters: GetCollectionByHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Collection>> {
        if (requestParameters['handle'] == null) {
            throw new runtime.RequiredError(
                'handle',
                'Required parameter "handle" was null or undefined when calling getCollectionByHandle().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xShopId'] != null) {
            headerParameters['x-shop-id'] = String(requestParameters['xShopId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/collections/{handle}`.replace(`{${"handle"}}`, encodeURIComponent(String(requestParameters['handle']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionFromJSON(jsonValue));
    }

    /**
     * Get collection by handle *(a slugged handle)* format. The collection will be returned in the response, but without the products. 
     * Get collection by handle
     */
    async getCollectionByHandle(requestParameters: GetCollectionByHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Collection> {
        const response = await this.getCollectionByHandleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List products in a collection
     */
    async listCollectionProductsRaw(requestParameters: ListCollectionProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Product>>> {
        if (requestParameters['handle'] == null) {
            throw new runtime.RequiredError(
                'handle',
                'Required parameter "handle" was null or undefined when calling listCollectionProducts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/collections/{handle}/products`.replace(`{${"handle"}}`, encodeURIComponent(String(requestParameters['handle']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductFromJSON));
    }

    /**
     * List products in a collection
     */
    async listCollectionProducts(requestParameters: ListCollectionProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Product>> {
        const response = await this.listCollectionProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all collections
     */
    async listCollectionsRaw(requestParameters: ListCollectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Collection>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xShopId'] != null) {
            headerParameters['x-shop-id'] = String(requestParameters['xShopId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/collections`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CollectionFromJSON));
    }

    /**
     * List all collections
     */
    async listCollections(requestParameters: ListCollectionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Collection>> {
        const response = await this.listCollectionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a collection
     */
    async updateCollectionByHandleRaw(requestParameters: UpdateCollectionByHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Collection>> {
        if (requestParameters['handle'] == null) {
            throw new runtime.RequiredError(
                'handle',
                'Required parameter "handle" was null or undefined when calling updateCollectionByHandle().'
            );
        }

        if (requestParameters['collection'] == null) {
            throw new runtime.RequiredError(
                'collection',
                'Required parameter "collection" was null or undefined when calling updateCollectionByHandle().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xShopId'] != null) {
            headerParameters['x-shop-id'] = String(requestParameters['xShopId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/collections/{handle}`.replace(`{${"handle"}}`, encodeURIComponent(String(requestParameters['handle']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CollectionToJSON(requestParameters['collection']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionFromJSON(jsonValue));
    }

    /**
     * Update a collection
     */
    async updateCollectionByHandle(requestParameters: UpdateCollectionByHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Collection> {
        const response = await this.updateCollectionByHandleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
