/* tslint:disable */
/* eslint-disable */
/**
 * PiShop REST API
 * This is the API documentation for PiShop.   It contains all the endpoints for the PiShop API. The API is exposed at [http://shop.pilab.hu/api/v1](http://shop.pilab.hu/api/v1).  The API is based on [OpenAPI](https://swagger.io/specification/), which is a standard for the description of APIs.  # Webshop API Overview  This API provides access to the core functionalities of our webshop, allowing developers to integrate with our platform. Key features include:  * **Product Catalog:** Retrieve detailed information about our products, including descriptions, images, and pricing. * **Cart Management:** Add, remove, and update items in the user\'s cart. * **Order Management:** Create, update, and track customer orders. * **Customer Management:** Manage customer accounts and profiles. * **Discounts and Promotions:** Apply discounts and promotions to products. * **Image Management:** Upload and manage product images. * **Pages and Menus:** Create and manage pages and menus. * **Authentication:** Secure access to protected resources using Bearer authentication (JWT).  This documentation outlines the available endpoints, request/response formats, and authentication procedures. Use this information to build powerful integrations and enhance your customer experience. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: gyula@pilab.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MenuItem,
  PageResponse,
} from '../models/index';
import {
    MenuItemFromJSON,
    MenuItemToJSON,
    PageResponseFromJSON,
    PageResponseToJSON,
} from '../models/index';

export interface GetMenuRequest {
    xShopId?: string;
}

export interface GetPageByHandleRequest {
    handle: string;
    xShopId?: string;
}

export interface GetPagesRequest {
    xShopId?: string;
}

/**
 * ContentApi - interface
 * 
 * @export
 * @interface ContentApiInterface
 */
export interface ContentApiInterface {
    /**
     * 
     * @summary Get the main menu
     * @param {string} [xShopId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    getMenuRaw(requestParameters: GetMenuRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MenuItem>>>;

    /**
     * Get the main menu
     */
    getMenu(requestParameters: GetMenuRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MenuItem>>;

    /**
     * 
     * @summary Get a page by its handle
     * @param {string} handle 
     * @param {string} [xShopId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    getPageByHandleRaw(requestParameters: GetPageByHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageResponse>>;

    /**
     * Get a page by its handle
     */
    getPageByHandle(requestParameters: GetPageByHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageResponse>;

    /**
     * 
     * @summary List all pages
     * @param {string} [xShopId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    getPagesRaw(requestParameters: GetPagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PageResponse>>>;

    /**
     * List all pages
     */
    getPages(requestParameters: GetPagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PageResponse>>;

}

/**
 * 
 */
export class ContentApi extends runtime.BaseAPI implements ContentApiInterface {

    /**
     * Get the main menu
     */
    async getMenuRaw(requestParameters: GetMenuRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MenuItem>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xShopId'] != null) {
            headerParameters['x-shop-id'] = String(requestParameters['xShopId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/menu`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MenuItemFromJSON));
    }

    /**
     * Get the main menu
     */
    async getMenu(requestParameters: GetMenuRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MenuItem>> {
        const response = await this.getMenuRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a page by its handle
     */
    async getPageByHandleRaw(requestParameters: GetPageByHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageResponse>> {
        if (requestParameters['handle'] == null) {
            throw new runtime.RequiredError(
                'handle',
                'Required parameter "handle" was null or undefined when calling getPageByHandle().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xShopId'] != null) {
            headerParameters['x-shop-id'] = String(requestParameters['xShopId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/pages/{handle}`.replace(`{${"handle"}}`, encodeURIComponent(String(requestParameters['handle']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageResponseFromJSON(jsonValue));
    }

    /**
     * Get a page by its handle
     */
    async getPageByHandle(requestParameters: GetPageByHandleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageResponse> {
        const response = await this.getPageByHandleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all pages
     */
    async getPagesRaw(requestParameters: GetPagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PageResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xShopId'] != null) {
            headerParameters['x-shop-id'] = String(requestParameters['xShopId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/pages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PageResponseFromJSON));
    }

    /**
     * List all pages
     */
    async getPages(requestParameters: GetPagesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PageResponse>> {
        const response = await this.getPagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
